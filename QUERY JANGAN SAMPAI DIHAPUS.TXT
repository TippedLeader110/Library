VIEW PINJAM (untuk data pinjam)
create or replace view pinjam as 
select d.id_transaksi, c.isbn, c.judul, a.nis, a.nama as siswa, a.tingkat, a.jurusan, a.kelas, b.id_petugas, b.nama as petugas, d.t_pinjam, d.t_kembali, d.denda
from pinjam_book d 
inner join siswa_view_all a on a.nis = d.nis
inner join petugas b on b.id_petugas = d.id_petugas
inner join book c on c.isbn = d.isbn; 

-------------------------------------------------------

VIEW KEMBALI (untuk table pengembalian)
create or replace view kembali as 
select d.id_transaksi, c.isbn, c.judul, a.nis, a.nama, d.t_pinjam, d.t_kembali, d.t_deadline 
from pinjam_book d 
inner join siswa_all a on a.nis = d.nis 
inner join book c on c.isbn = d.isbn;

-------------------------------------------------------

FUNCTION DENDA (untuk mencari tahu berapa denda id_transaksi tsb)
create or replace function denda (date1 date, id int(11), id_trans int(11), uang int(11))
returns int 
begin
declare date2 date;
declare b int;
Select t_deadline from pinjam_book where id_anggota = id and id_transaksi = id_trans into date2;
if day(date1) > day(date2) then
set b = (day(date1) - day(date2)) * uang;
else
set b = 0;
end if;
return b;
end!

-------------------------------------------------------

TRIGGER PEMINJAMAN (bila dipinjam jumlah buku -1)
CREATE OR REPLACE TRIGGER peminjaman after INSERT ON pinjam_book
FOR EACH ROW BEGIN
if exists(select t_pinjam from pinjam_book where id_transaksi = new.id_transaksi and t_pinjam is not null) then
UPDATE book
SET jmlh = jmlh - 1
WHERE
isbn = NEW.isbn;
end if;
END!

-------------------------------------------------------

TRIGGER PENGEMBALIAN/KAS (bila di kembalikan, jumlah buku +1, bila ada denda insert ke cashflow dengan keterangan denda)
CREATE OR REPLACE TRIGGER pengembalian_kas after update ON pinjam_book
FOR EACH ROW BEGIN
if exists (select t_kembali from pinjam_book where id_transaksi = new.id_transaksi and t_kembali is not null) then
UPDATE book
SET jmlh = jumlh + 1
WHERE
isbn = NEW.isbn;
end if;
if exists (select t_kembali from pinjam_book where id_transaksi = new.id_transaksi and t_kembali is not null and not denda = 0) then
insert into cashflow(id_petugas, tipe, tanggal, nominal, keterangan) 
value(new.id_petugas, 'pemasukan', curdate(), new.denda, 'Denda peminjaman buku');
end if;
END!

------------------------------------------------------- 

VIEW BUKU (view buku dengan detail lokasi berdasarkan id_rak)
create or replace view buku as 
select a.isbn, b.lokasi, a.penerbit, a.pengarang, a.thn_buku, a.jmlh, a.tgl_pengadaan, a.judul, a.jenis_buku, a.kategori
from book a 
inner join lok_book b on a.id_rak = b.id_rak;

-------------------------------------------------------

TRIGGER insert_lokasi (bila di buku mencoba input id_rak baru, dibuat lagi di tabel lok_book)
CREATE or replace TRIGGER insert_lokasi after insert ON book
FOR EACH ROW BEGIN
declare lks text;
select concat('rak ',left(new.id_rak,1),' tingkat ',right(new.id_rak,1)) into lks;
if not exists (select id_rak from lok_book where id_rak = new.id_rak) then
insert into lok_book (id_rak, rak, tingkat, lokasi) 
values (new.id_rak, left(new.id_rak,1), right(new.id_rak,1), lks);
end if;
END!

-------------------------------------------------------
	
TRIGGER insert_lokasi2 (bila di buku mencoba update dengan id_rak baru, dibuat lagi di tabel lok_book)
CREATE or replace TRIGGER insert_lokasi2 after update ON book
FOR EACH ROW BEGIN
declare lks text;
select concat('rak ',left(new.id_rak,1),' tingkat ',right(new.id_rak,1)) into lks;
if not exists (select id_rak from lok_book where id_rak = new.id_rak) then
insert into lok_book (id_rak, rak, tingkat, lokasi) 
values (new.id_rak, left(new.id_rak,1), right(new.id_rak,1), lks);
end if;
END!

-------------------------------------------------------

VIEW SISWA_VIEW (untuk detail kelas siswa berdasarkan id_kelas)
create or replace view siswa_view as 
select a.nis, a.nama, b.tingkat, b.jurusan, b.kelas, a.alamat, a.no_telp
from siswa a
inner join kelas b on a.id_kelas = b.id_kelas;

-------------------------------------------------------

VIEW PRESENSI_VIEW (untuk detail kelas siswa yang mengisi presensi berdasarkan id_kelas)
create or replace view presensi_view as
select a.no_presensi, a.nis, b.nama, c.tingkat, c.jurusan, c.kelas, a.tanggal, a.kegiatan
from presensi a
inner join siswa b on a.nis = b.nis
inner join kelas c on b.id_kelas = c.id_kelas;

-------------------------------------------------------

TRIGGER INSERT SISWA_DELETE (bila di delete insert ke log_siswa)
create or replace trigger siswa_delete before delete on siswa
for each row begin
insert into log_siswa select * from siswa where nis = old.nis;
end!

-------------------------------------------------------

VIEW SISWA_ALL (untuk union siswa berdasarkan siswa yang sudah di hapus)
create or replace view siswa_all as 
select * from siswa union select * from log_siswa;

--------------------------------------------------------

VIEW SISWA_VIEW_ALL (untuk detail kelas siswa_all berdasarkan id_kelas)
create or replace view siswa_view_all as 
select a.nis, a.nama, b.tingkat, b.jurusan, b.kelas, a.alamat, a.no_telp
from siswa_all a
inner join kelas b on a.id_kelas = b.id_kelas;

--------------------------------------------------------

EVENT HAPUS_DB (Supaya db tidak menumpuk di beberapa tabel, dihapus 2 tahun berkala)
create event hapus_db on schedule every 2 year
starts '2020-08-01 00:00:00' on completion not preserve
enable comment 'hapus database agar tidaq numpuk'
do
begin
TRUNCATE TABLE log_siswa;
TRUNCATE TABLE presensi;
TRUNCATE TABLE pinjam_book;
DELETE from siswa where id_kelas = 'A.tpg.0'
AND id_kelas = 'A.tptu.0'
AND id_kelas = 'A.tpm.0'
AND id_kelas = 'A.tkj.0'
AND id_kelas = 'A.tkro.0'
AND id_kelas = 'A.tgtl.0'
AND id_kelas = 'A.titl.0'
AND id_kelas = 'A.tg.0'
AND id_kelas = 'A.tbsm.0'
AND id_kelas = 'A.tav.0'
AND id_kelas = 'A.rpl.0'
AND id_kelas = 'A.pst.0'
AND id_kelas = 'A.dpib.0'
AND id_kelas = 'A.bkp.0';
end!

--------------------------------------------------------